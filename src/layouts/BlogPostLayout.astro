---
import MainLayout from './MainLayout.astro';
import Header from '../components/Header.astro';
import BackButton from '../components/BackButton.astro';
import Footer from '../components/Footer.astro';
import { calculateReadingTime } from '../utils/readingTime';

export interface Props {
  title: string;
  date: string;
  description?: string;
  image?: string;
  content: string;
  headings: Array<{ depth: number; slug: string; text: string }>;
}

const { title, date, description, image, content, headings } = Astro.props;
const readingTime = calculateReadingTime(content);
const formattedDate = new Date(date).toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
});

// Filter headings to only include h2 and h3 for the table of contents
const tocHeadings = headings.filter(heading => heading.depth <= 3);
---

<MainLayout title={title} description={description} image={image}>
  <div class="min-h-screen">
    <Header />
    
    <main class="max-w-6xl mx-auto px-6 py-12">
      <div class="mb-8">
        <BackButton />
      </div>
      
      <div class="grid grid-cols-1 lg:grid-cols-4 gap-12">
        <!-- Main Content -->
        <article class="lg:col-span-3">
          <header class="mb-12">
            <h1 class="font-eb-garamond font-bold italic text-4xl md:text-5xl lg:text-6xl leading-tight mb-6 text-light-text dark:text-dark-text">
              {title}
            </h1>
            <div class="flex items-center gap-4 text-light-text/70 dark:text-dark-text/70">
              <time datetime={date}>{formattedDate}</time>
              <span>â€¢</span>
              <span>{readingTime} min read</span>
            </div>
          </header>
          
          <div class="prose prose-lg prose-stone dark:prose-invert max-w-none font-newsreader markdown-content">
            <slot />
          </div>
        </article>
        
        <!-- Sidebar - Hidden on mobile/tablet, visible on desktop -->
        <aside class="hidden lg:block lg:col-span-1">
          <div class="sticky top-24">
            {tocHeadings.length > 0 && (
              <div class="mb-8">
                <h3 class="font-eb-garamond font-bold text-xl mb-4 text-light-text dark:text-dark-text">
                  Contents
                </h3>
                <nav id="table-of-contents">
                  <ul class="space-y-2 text-sm">
                    {tocHeadings.map((heading) => (
                      <li class={`${heading.depth === 3 ? 'ml-4' : ''}`}>
                        <a 
                          href={`#${heading.slug}`}
                          class="toc-link block py-1 text-light-text/70 dark:text-dark-text/70 hover:text-light-text dark:hover:text-dark-text transition-colors"
                          data-heading={heading.slug}
                        >
                          {heading.text}
                        </a>
                      </li>
                    ))}
                  </ul>
                </nav>
              </div>
            )}
          </div>
        </aside>
      </div>
    </main>
    
    <Footer />
  </div>

  <script>
    function initTableOfContents() {
      const tocLinks = document.querySelectorAll('.toc-link');
      const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');
      
      if (tocLinks.length === 0 || headings.length === 0) return;

      // Create intersection observer
      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          const id = entry.target.id;
          const tocLink = document.querySelector(`[data-heading="${id}"]`);
          
          if (entry.isIntersecting) {
            // Remove active class from all links
            tocLinks.forEach(link => {
              link.classList.remove('font-bold', 'text-light-text', 'dark:text-dark-text');
              link.classList.add('text-light-text/70', 'dark:text-dark-text/70');
            });
            
            // Add active class to current link and all previous ones
            const currentIndex = Array.from(tocLinks).findIndex(link => 
              link.getAttribute('data-heading') === id
            );
            
            if (currentIndex !== -1) {
              for (let i = 0; i <= currentIndex; i++) {
                const link = tocLinks[i];
                link.classList.add('font-bold', 'text-light-text', 'dark:text-dark-text');
                link.classList.remove('text-light-text/70', 'dark:text-dark-text/70');
              }
            }
          }
        });
      }, {
        rootMargin: '-20% 0% -35% 0%',
        threshold: 0
      });

      // Observe all headings
      headings.forEach((heading) => {
        if (heading.id) {
          observer.observe(heading);
        }
      });

      // Add smooth scrolling to TOC links
      tocLinks.forEach(link => {
        link.addEventListener('click', (e) => {
          e.preventDefault();
          const targetId = link.getAttribute('data-heading');
          const targetElement = document.getElementById(targetId);
          
          if (targetElement) {
            targetElement.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        });
      });
    }

    function initCodeBlocks() {
      // Add copy functionality to code blocks
      const codeBlocks = document.querySelectorAll('pre');
      
      codeBlocks.forEach((block, index) => {
        // Skip if already processed
        if (block.querySelector('.copy-button')) return;
        
        const button = document.createElement('button');
        button.className = 'copy-button absolute top-2 right-2 z-20 bg-gray-700 hover:bg-gray-600 text-white rounded px-2 py-1 text-xs font-medium transition-all duration-200 opacity-80 hover:opacity-100 flex items-center gap-1';
        button.setAttribute('aria-label', 'Copy code to clipboard');
        
        const copyIcon = `
          <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
            <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
          </svg>
        `;
        
        const successIcon = `
          <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="20,6 9,17 4,12"></polyline>
          </svg>
        `;
        
        button.innerHTML = `${copyIcon}`;
        
        button.addEventListener('click', async () => {
          const code = block.querySelector('code');
          if (code) {
            try {
              const textContent = code.textContent || code.innerText || '';
              await navigator.clipboard.writeText(textContent);
              
              // Update button to show success
              button.innerHTML = `${successIcon}`;
              button.className = 'copy-button absolute top-2 right-2 z-20 bg-gray-600 hover:bg-gray-500 text-white rounded px-2 py-1 text-xs font-medium transition-all duration-200 opacity-100 flex items-center gap-1';
              
              // Reset after 2 seconds
              setTimeout(() => {
                button.innerHTML = `${copyIcon}`;
                button.className = 'copy-button absolute top-2 right-2 z-20 bg-gray-700 hover:bg-gray-600 text-white rounded px-2 py-1 text-xs font-medium transition-all duration-200 opacity-80 hover:opacity-100 flex items-center gap-1';
              }, 2000);
            } catch (err) {
              console.error('Failed to copy code:', err);
              // Show error state
              button.innerHTML = `<span>Failed</span>`;
              button.className = 'copy-button absolute top-2 right-2 z-20 bg-red-600 text-white rounded px-2 py-1 text-xs font-medium transition-all duration-200 opacity-100 flex items-center gap-1';
              
              setTimeout(() => {
                button.innerHTML = `${copyIcon}<span>Copy</span>`;
                button.className = 'copy-button absolute top-2 right-2 z-20 bg-gray-700 hover:bg-gray-600 text-white rounded px-2 py-1 text-xs font-medium transition-all duration-200 opacity-80 hover:opacity-100 flex items-center gap-1';
              }, 2000);
            }
          }
        });

        // Make the pre element relative and add group class
        block.style.position = 'relative';
        block.style.overflow = 'visible';
        block.appendChild(button);
      });
    }

    function initImageCaptions() {
      // Convert images with alt text to figures with captions
      const images = document.querySelectorAll('.markdown-content img');
      
      images.forEach(img => {
        const alt = img.getAttribute('alt');
        if (alt && alt.trim() && !img.closest('figure')) {
          const figure = document.createElement('figure');
          figure.className = 'my-8';
          
          const caption = document.createElement('figcaption');
          caption.className = 'text-center mt-0 text-sm text-light-text/80 dark:text-dark-text/80 font-newsreader italic';
          caption.textContent = alt;
          
          img.parentNode?.insertBefore(figure, img);
          figure.appendChild(img);
          figure.appendChild(caption);
          
          // Remove alt attribute since it's now in the caption
          img.removeAttribute('alt');
          img.setAttribute('alt', ''); // Keep empty alt for accessibility
        }
      });
    }

    // Initialize on page load
    document.addEventListener('astro:page-load', () => {
      initTableOfContents();
      initCodeBlocks();
      initImageCaptions();
    });
    
    // Re-initialize after page transitions
    document.addEventListener('astro:after-swap', () => {
      initTableOfContents();
      initCodeBlocks();
      initImageCaptions();
    });
  </script>
</MainLayout>
